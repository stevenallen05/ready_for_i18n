#!/usr/bin/env ruby
 
$:.unshift File.join(File.dirname(__FILE__), *%w[.. lib])
 
help = <<HELP
******************************************************************************
ready_for_i18n is a handy tool in the first step of transfering your local 
Rails project to an i18n one.

It will automatically extract hard-coded text from your ERB view file,
then choose a proper key and replace them with the I18n.translate method.
 
Basic Command Line Usage:
  ready_for_i18n <path_to_ERB_source_files> [target path]

#  Your erb files in source path will be transformed(i18n_ready) and copy to target file path.
#  If the target path is missing, then ready_for_i18n will do a Dry run and only generate the locale file.
#  A locale file will be output to STDOUT, which you can redirect to file like
#  ready_for_i18n <path_to_ERB_source_files> [target path] > /temp/en.yml
  
# using the following options:
 
HELP
 
require 'optparse'
require 'fileutils'
require 'ready_for_i18n'

options = {}
opts = OptionParser.new do |opts|
  opts.banner = help

  opts.on("-d", "--destination [PATH]", "directory to stage results") do |path|
    options['destination'] = path unless path.nil?
  end

  opts.on("-r", "--restrict_to [regexp]", "restrict to only paths matching") do |regexp|
    options['restrict_to'] = regexp unless regexp.nil?
  end

  opts.on("--locale [LOCALE]", "Generating for the specified locale (default locale 'en')") do |locale|
    options['locale'] = locale unless locale.nil?
  end

  opts.on("--ext [EXTENSION]", "The file extension name of your views(default '.html.erb')") do |extension|
    options['extension'] = extension unless extension.nil?
  end
  
  opts.on("--dot", "Generate a structured dictionary file and support `Lazy` Lookup of Rails > 2.3 ") do |dot|
    options['dot'] = true
  end
  
  opts.on("--namespace [NAMESPACE]", "namespace to place extracted keys") do |namespace|
    options['namespace'] = namespace unless namespace.nil?
  end

  opts.on("--area [area]", "area to place extracted keys") do |area|
    options['area'] = area unless area.nil?
  end

  opts.on("--tool [tool]", "tool to place extracted keys") do |tool|
    options['tool'] = tool unless tool.nil?
  end

  opts.on("--extractors [list]", "extractors to use") do |ex|
    options['extractors'] = ex unless ex.nil?
  end

  opts.on("-f", "--locale_file [FILENAME]", "namespace to place extracted keys") do |locale_file|
    options['locale_file'] = locale_file
  end

  opts.on("--nokey",
    "Output only the text found in your view files but not generate the keys. Normally used for the non-english project") do |nokey|
    options['nokey'] = true
  end

  opts.on('--keymap <extracted_locale_text_file>:<english_key_file>',
    "Using two files for the key mapping from locale text extracted(with --nokey) to english. Separated by the colon ':'") do |mapper|
    error_parameter if mapper.split(':').size != 2
    options['keymap'] = mapper
  end
end
 
# Read command line options into `options` hash
opts.parse!
 
# Get source and destintation from command line
options['source']      = ARGV[0]
 
# Run the i18n generating
ReadyForI18N::I18nGenerator.excute(options)
